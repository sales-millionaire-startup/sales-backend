// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                        Int        @id @default(autoincrement())
  name_en                   String?
  name_ge                   String?
  name_tr                   String?
  depth                     Int?
  maxDepth                  Int?       @default(0)
  parentCategoryId          Int?
  parentCategory            Category?  @relation("childCategories", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  childCategories           Category[] @relation("childCategories")
  parentMostCategoryId      Int?
  parentMostCategory        Category?  @relation("parentMostCategory", fields: [parentMostCategoryId], references: [id], onDelete: Cascade)
  parentMostChildCategories Category[] @relation("parentMostCategory")
  products                  Product[]
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @default(now())
}

model Product {
  id             Int             @id @default(autoincrement())
  name_en        String?         @unique
  name_ge        String?         @unique
  name_tr        String?         @unique
  imageName      String?
  imageUrl       String?
  categoryId     Int
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  specifications Specification[]
  cartItems      CartItem[]
  purchaseRequestItems PurchaseRequestItem[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
}

model Specification {
  id            Int         @id @default(autoincrement())
  name_en       String?
  name_ge       String?
  name_tr       String?
  isSplitable   Boolean? @default(false)
  hierarchyInd  Int?

  productId     Int
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  unitElementId Int
  unitElement   UnitElement @relation(fields: [unitElementId], references: [id])

  cartItemValues     CartItemValue[]
  purchaseRequestItemValues PurchaseRequestItemValue[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model UnitElement {
  id             Int             @id @default(autoincrement())
  name_en        String?         @unique
  name_ge        String?         @unique
  name_tr        String?         @unique
  specifications Specification[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  cart      Cart?
  purchaseRequest PurchaseRequest?
  purchaseRequestItemOnSellerResponse PurchaseRequestItemOnSellerResponse[]

}

enum Role {
  ADMIN
  SELLER
  BUYER
}

model CartItem {
  id              Int    @id @default(autoincrement())
  cartId          Int
  productId       Int
  imageName      String?
  imageUrl       String?
  
  cart          Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  cartItemValues CartItemValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CartItemValue {
  id              Int    @id @default(autoincrement())
  value           String?
  buyerComment    String?

  cartItemId          Int?
  specificationId     Int?

  cartItem          CartItem?          @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  specification Specification? @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PurchaseRequest {
  id        Int        @id @default(autoincrement())
  
  userId     Int        @unique
  buyer      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchaseRequestItems PurchaseRequestItem[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model PurchaseRequestItem {
  id              Int    @id @default(autoincrement())
  purchaseRequestId      Int
  productId       Int
  
  purchaseRequest          PurchaseRequest          @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  product                  Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  purchaseRequestItemValues PurchaseRequestItemValue[]
  purchaseRequestItemOnSellerResponse PurchaseRequestItemOnSellerResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PurchaseRequestItemValue {
  id              Int    @id @default(autoincrement())
  value           String?
  buyerComment    String?

  purchaseRequestItemId          Int?
  specificationId     Int?

  purchaseRequestItem          PurchaseRequestItem?          @relation(fields: [purchaseRequestItemId], references: [id], onDelete: Cascade)
  specification Specification? @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PurchaseRequestItemOnSellerResponse {
  purchaseRequestItem   PurchaseRequestItem @relation(fields: [purchaseRequestItemId], references: [id], onDelete: Cascade)
  purchaseRequestItemId Int

  seller   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  sellerAcceptance Boolean
  sellerPrice      Float?
  sellerComment    String?
  buyerAcceptance  Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([purchaseRequestItemId, userId])
  @@unique([purchaseRequestItemId, userId], name: "purchaseRequestItemId_sellerId_unique_key")
}
